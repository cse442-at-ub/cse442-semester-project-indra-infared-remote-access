#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('indra-server:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */
const PORT = '2680';  // change value to the desired port
var port = normalizePort(process.env.PORT || PORT);
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}

var io = require("socket.io")();
io.attach(server);

io.on("connection", (socket) => {
  console.log("client connected\n");

  socket.on("clicked", (id) => {
    console.log(id + " clicked.");
  });


  // A client has sent a search request in the form of {'brand':<brand>, 'model':<model>}
  // This should be forwarded to the raspberry pi whose socket ID is stored in the 
  socket.on("search_request", (data) => {
    data['id'] = socket.id;
    console.log(data);
    socket.to(raspberryPiId).emit("search_request", data);
  });


  // Forward search results from the Pi to the requesting client
  socket.on("search_results", (data) => {
    const androidSocketId = data['id'];
    const searchResults = data['results'];

    socket.to(androidSocketId).emit("search_results", searchResults);
  });
});

// namespace pi connects to
const pi = io.of("/pi");
pi.on("connection", (socket) => {
  console.log("pi connected!\n");
  // extract remote and button info received from android app
  var remote, button;
  socket.on("button_press", (data) =>{
    remote = data["remote"];
    button = data["button"];

    // emit pi_receive event which the pi client will use to receive remote and button press info
    socket.emit("button_press", {"remote": remote, "button": button});
  });
});