#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('indra-server:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */
const PORT = '2680';  // change value to the desired port
var port = normalizePort(process.env.PORT || PORT);
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}

var io = require("socket.io")();
io.attach(server);

// var raspberryPiId
// // namespace pi connects to
// const pi = io.of("/pi");
// pi.on("connection", (socket) => {
//   console.log("pi connected!\n");
  
//   raspberryPiId = socket.id;
// });

io.on("connection", (socket) => {
  console.log("client connected, id: " + socket.id);

  // socket.on("clicked", (id) => {
  //   console.log(id + " clicked.");
  // });


  // A client has sent a search request in the form of {'brand':<brand>, 'model':<model>}
  // This should be forwarded to the raspberry pi whose socket ID is stored in the 
  socket.on("search_request", (data) => {
    data['id'] = socket.id;
    console.log(data);
    io.emit("search_request", data);
  });


  // Forward search results from the Pi to the requesting client
  socket.on("search_results", (data) => {
    //const androidSocketId = data['id']; // not needed right now
    const searchResults = data['results'];

    io.emit("search_results", searchResults);
  });

  // extract remote and button info received from android app
  var remote, button;
  socket.on("button_press", (data) => {
    data = JSON.parse(data);
    remote = data["remote"];
    button = data["button"];

    // emit button_press event to all connected clients
    io.emit("button_press", {"remote": remote, "button": button});
  });

  //--Handle LIRC config file request
  var brand, model, id;

  // listen on file_request event from app and extract brand and model
  socket.on("file_request", (data)=> {
    data = JSON.parse(data);
    brand = data["brand"];
    model = data["model"];
    id = socket.id;

    // emit file_request event to the pi
    io.emit("file_request",
    {
      "brand": brand,
      "model": model,
      "id": id
    });
  });

  // handle config file response from pi and emit to app
  socket.on("file_response", (data) => {
    data = JSON.parse(data);

    io.emit("file_response",
    {
      "success": data["success"],
      "file_contents": data["file_contents"],
      "id": data["id"]
    });
  });
});

